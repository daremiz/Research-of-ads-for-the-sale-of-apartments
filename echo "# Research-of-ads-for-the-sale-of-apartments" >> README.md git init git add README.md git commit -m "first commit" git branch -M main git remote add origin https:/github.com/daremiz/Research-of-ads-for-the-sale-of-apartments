import pandas as pd
data = pd.read_csv('/datasets/real_estate_data.csv') 
data = pd.read_csv('/datasets/real_estate_data.csv',sep = '\t')
print(data.head())
data.info()
data.hist(figsize=(15, 20))
data.isna().sum()
Исследование объявлений о продаже квартир
В вашем распоряжении данные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктов за несколько лет. Нужно научиться определять рыночную стоимость объектов недвижимости. Ваша задача — установить параметры. Это позволит построить автоматизированную систему: она отследит аномалии и мошенническую деятельность.

По каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных. Например, расстояние до центра, аэропорта, ближайшего парка и водоёма.

1  Откройте файл с данными и изучите общую информацию.
import pandas as pd
import matplotlib.pyplot as plt
data = pd.read_csv('/datasets/real_estate_data.csv') 
Выведем первые строки таблицы методом head().

print(data.head())
  total_images\tlast_price\ttotal_area\tfirst_day_exposition\trooms\tceiling_height\tfloors_total\tliving_area\tfloor\tis_apartment\tstudio\topen_plan\tkitchen_area\tbalcony\tlocality_name\tairports_nearest\tcityCenters_nearest\tparks_around3000\tparks_nearest\tponds_around3000\tponds_nearest\tdays_exposition
0  20\t13000000.0\t108.0\t2019-03-07T00:00:00\t3\...                                                                                                                                                                                                                                                                  
1  7\t3350000.0\t40.4\t2018-12-04T00:00:00\t1\t\t...                                                                                                                                                                                                                                                                  
2  10\t5196000.0\t56.0\t2015-08-20T00:00:00\t2\t\...                                                                                                                                                                                                                                                                  
3  0\t64900000.0\t159.0\t2015-07-24T00:00:00\t3\t...                                                                                                                                                                                                                                                                  
4  2\t10000000.0\t100.0\t2018-06-19T00:00:00\t2\t...                                                                                                                                                                                                                                                                  
Выявлено, что данные склеены в одну строку. Добавляем разделитель - знак табуляции, и выводим основную информацию о таблице методом info().

data = pd.read_csv('/datasets/real_estate_data.csv',sep = '\t')
print(data.head())
   total_images  last_price  total_area first_day_exposition  rooms  \
0            20  13000000.0       108.0  2019-03-07T00:00:00      3   
1             7   3350000.0        40.4  2018-12-04T00:00:00      1   
2            10   5196000.0        56.0  2015-08-20T00:00:00      2   
3             0  64900000.0       159.0  2015-07-24T00:00:00      3   
4             2  10000000.0       100.0  2018-06-19T00:00:00      2   

   ceiling_height  floors_total  living_area  floor is_apartment  ...  \
0            2.70          16.0         51.0      8          NaN  ...   
1             NaN          11.0         18.6      1          NaN  ...   
2             NaN           5.0         34.3      4          NaN  ...   
3             NaN          14.0          NaN      9          NaN  ...   
4            3.03          14.0         32.0     13          NaN  ...   

   kitchen_area  balcony    locality_name  airports_nearest  \
0          25.0      NaN  Санкт-Петербург           18863.0   
1          11.0      2.0   посёлок Шушары           12817.0   
2           8.3      0.0  Санкт-Петербург           21741.0   
3           NaN      0.0  Санкт-Петербург           28098.0   
4          41.0      NaN  Санкт-Петербург           31856.0   

  cityCenters_nearest  parks_around3000  parks_nearest  ponds_around3000  \
0             16028.0               1.0          482.0               2.0   
1             18603.0               0.0            NaN               0.0   
2             13933.0               1.0           90.0               2.0   
3              6800.0               2.0           84.0               3.0   
4              8098.0               2.0          112.0               1.0   

   ponds_nearest  days_exposition  
0          755.0              NaN  
1            NaN             81.0  
2          574.0            558.0  
3          234.0            424.0  
4           48.0            121.0  

[5 rows x 22 columns]
Изучим общую информацию о файле методом info().

data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 23699 entries, 0 to 23698
Data columns (total 22 columns):
 #   Column                Non-Null Count  Dtype  
---  ------                --------------  -----  
 0   total_images          23699 non-null  int64  
 1   last_price            23699 non-null  float64
 2   total_area            23699 non-null  float64
 3   first_day_exposition  23699 non-null  object 
 4   rooms                 23699 non-null  int64  
 5   ceiling_height        14504 non-null  float64
 6   floors_total          23613 non-null  float64
 7   living_area           21796 non-null  float64
 8   floor                 23699 non-null  int64  
 9   is_apartment          2775 non-null   object 
 10  studio                23699 non-null  bool   
 11  open_plan             23699 non-null  bool   
 12  kitchen_area          21421 non-null  float64
 13  balcony               12180 non-null  float64
 14  locality_name         23650 non-null  object 
 15  airports_nearest      18157 non-null  float64
 16  cityCenters_nearest   18180 non-null  float64
 17  parks_around3000      18181 non-null  float64
 18  parks_nearest         8079 non-null   float64
 19  ponds_around3000      18181 non-null  float64
 20  ponds_nearest         9110 non-null   float64
 21  days_exposition       20518 non-null  float64
dtypes: bool(2), float64(14), int64(3), object(3)
memory usage: 3.7+ MB
Построим общую гистограмму для всех столбцов таблицы.

data.hist(figsize=(15, 20))
array([[<AxesSubplot:title={'center':'total_images'}>,
        <AxesSubplot:title={'center':'last_price'}>,
        <AxesSubplot:title={'center':'total_area'}>,
        <AxesSubplot:title={'center':'rooms'}>],
       [<AxesSubplot:title={'center':'ceiling_height'}>,
        <AxesSubplot:title={'center':'floors_total'}>,
        <AxesSubplot:title={'center':'living_area'}>,
        <AxesSubplot:title={'center':'floor'}>],
       [<AxesSubplot:title={'center':'kitchen_area'}>,
        <AxesSubplot:title={'center':'balcony'}>,
        <AxesSubplot:title={'center':'airports_nearest'}>,
        <AxesSubplot:title={'center':'cityCenters_nearest'}>],
       [<AxesSubplot:title={'center':'parks_around3000'}>,
        <AxesSubplot:title={'center':'parks_nearest'}>,
        <AxesSubplot:title={'center':'ponds_around3000'}>,
        <AxesSubplot:title={'center':'ponds_nearest'}>],
       [<AxesSubplot:title={'center':'days_exposition'}>, <AxesSubplot:>,
        <AxesSubplot:>, <AxesSubplot:>]], dtype=object)

Столбец total_images показывает, что в объявлениях могло быть до 25 фотографий, чаще всего пользователи добавляли от 10 до 15 фото. В столбце rooms можем увидеть, что в объявлениях фигурировали объекты до 5 комнат. Имеется небольшой "хвост" выше 5 комнат, эти данные необходимо проверить на наличие выбросов. Общее количество этажей floors_total, как правило, до 30. Столбец floor, отражащий данные по этажу, на котором находится квартира, показывает нормальное распределение. Столбец balcony, показывающий количество балконов в квартире, следует проверить на выбросы, т.к. значение более 4 не кажется правдоподобным. Столбцы с картографическими данными следует подробнее рассмотреть при дальнейшем анализе, т.к. нужно понять, в каких единицах выражено расстояние.

В столбцах, выражающих площадь помещения или его комнаты - total area, living_area, kitchen_area при дальнейшем анализе следует проверить данные на наличие неправдаподобно малых значений и проработать их.

Столбцы last_price и ceiling_height на текущих графиках плохо читаются, изменим для них параметр количества корзин bins и добавив параметр range.

# выведем первые строки столбца last price, чтобы понять порядок значений
print(data['last_price'].head())
# счёт идёт на десятки миллионов, поэтому примем это во внимание в параметре range
data.hist('last_price',bins=10,range=(0,10000000))
​
0    13000000.0
1     3350000.0
2     5196000.0
3    64900000.0
4    10000000.0
Name: last_price, dtype: float64
array([[<AxesSubplot:title={'center':'last_price'}>]], dtype=object)

Столбец last_price показывает нормальное распределение.

data['ceiling_height'].hist(range=(0,10))
<AxesSubplot:>

В столбце ceiling_height - высота потолков, имеются неправдоподные значения более 4 метров, похоже на выброс.

2  Предобработка данных
2.1  Проработка пропусков в таблице
Выведем количество пропущенных значений для каждого столбца.

data.isna().sum()
total_images                0
last_price                  0
total_area                  0
first_day_exposition        0
rooms                       0
ceiling_height           9195
floors_total               86
living_area              1903
floor                       0
is_apartment            20924
studio                      0
open_plan                   0
kitchen_area             2278
balcony                 11519
locality_name              49
airports_nearest         5542
cityCenters_nearest      5519
parks_around3000         5518
parks_nearest           15620
ponds_around3000         5518
ponds_nearest           14589
days_exposition          3181
dtype: int64
1) Пропущенные значения в столбце ceiling_height - высота потолков, которую пользователь при заполнении мог не знать или забыть указать. Пропуски можно будет заполнить медианным значением позднее. Необходимо будет проанализировать наличие выбросов.

2) На первый взгляд, пропущенных значений столбце floors_total, всего этажей, немного - 86.

# рассчитаем долю пропущенных значений в столбце floors_total
print(data['floors_total'].isna().sum()/data['floors_total'].count())
0.0036420615762503706
Избавимся от пропусков в данном столбце, удалив их.

# снова проверим наличие пропусков в столбце
data = data.dropna(subset=['floors_total'])
# снова проверим наличие пропусков в столбце
print(data['floors_total'].isna().sum())
0
3) Пропуски в столбце living_area - жилая площадь. Это важный для анализа столбец. Прежде, чем заполнять пропуски, необходимо будет проследить взаимосвязь между жилой площадью и стоимостью жилья. Заполнять не общим медианным значением, а медианой по группе, если такую удастся выделить.

4) Is_apartment - не понятный столбец, посмотрим на него ещё раз.

print(data['is_apartment'].head())
print(data['is_apartment'].tail())
# проверим, какие вообще есть значения в этом столбце
print(data['is_apartment'].unique())
0    NaN
1    NaN
2    NaN
3    NaN
4    NaN
Name: is_apartment, dtype: object
23694    NaN
23695    NaN
23696    NaN
23697    NaN
23698    NaN
Name: is_apartment, dtype: object
[nan False True]
В столбце is_apartment есть как значения True, так и False. Большая часть строк, 20924, не заполнена. Просто отбросить их мы не можем, но и вывести логику для заполнения тоже. Стоит уточнить смысл этих данных у коллег. На мой взгляд, на дальнейший нализ этот столбец не повлияет, поэтому оставим его без изменений.

5) Столбец kitchen_area - площадь кухни - аналогично с пропусками в столбце living_area, после дальнейшего анализа заполним не общим медианным значением, а медианой по группе, если такую удастся выделить.

6) Проверим, какие значения содержит столбец balcony.

)
print(data['balcony'].unique())
[nan  2.  0.  1.  5.  4.  3.]
Существуют квартиры без балкона. В данном столбце пользователями применялось ручное заполнение. Поэтому отсутствие значения скорее всего означает, что балкона нет. Заполним пропущенные значения нулем.

data['balcony'] = data['balcony'].fillna(0)
print(data['balcony'].isna().sum())
0
7) Пропусков в столбце locality_name 49, это малая часть от общего датасета. Отбросим их.

data = data.dropna(subset=['locality_name'])
print(data['floors_total'].isna().sum())
0
8) Столбцы airports_nearest, cityCenters_nearest, parks_around3000, parks_nearest, ponds_around3000, ponds_nearest содержат картографические данные. Попробуем проработать пропуски при дальнейшем анализе.

9) Столбец days_exposition показыват, сколько дней объявление было опубликовано. При этом пропусков в начальной дате публикации нет, поэтому можем посчитать эти значения в случае, если они пропущены. Однако ранее мы выяснили, что тип данных в столбце first_day_exposition - object, поэтому пропуски заполним при дальнейшем анализе.

Подведём итог первичной проработки пропусков.

data.isna().sum()
total_images                0
last_price                  0
total_area                  0
first_day_exposition        0
rooms                       0
ceiling_height           9084
floors_total                0
living_area              1865
floor                       0
is_apartment            20805
studio                      0
open_plan                   0
kitchen_area             2222
balcony                     0
locality_name               0
airports_nearest         5524
cityCenters_nearest      5501
parks_around3000         5500
parks_nearest           15535
ponds_around3000         5500
ponds_nearest           14529
days_exposition          3171
dtype: int64
Были устранены пропуски в столбцах floors_total, balcony, locality_name. В случае с floors_total и locality_name, строки с пропусками были исключены методом dropna(). Возможная причина появления этих пропусков - случайная ошибка ручного ввода пользователя. В случае с balcony, строки с пропусками были заполнены 0, т.к. предполагается, что пользователь не указал значение числа балконов ввиду их отсутствия. В столбце is_apartment большинство значений пропущено, остальные имеют булевой тип данных. Скорее всего, ошибка выгрузки, этот столбец в дальнейшем анализе использовать не будем.

Пропуски в столбце ceiling_height необходимо заполнить медианным значением после того, как избавимся от выбросов. В столбцах kitchen_area - площадь кухни - аналогично с пропусками в столбце living_area заполнить данные лучше исходя из привязки к общей площади квартиры. Пропущенные значения в столбце days_exposition можно заполнить, поработав с типом данных в столбце first_day_exposition.

Type Markdown and LaTeX: 𝛼2
​
3  Посчитайте и добавьте в таблицу новые столбцы
​
4  Проведите исследовательский анализ данных
# выведем на экран первые и последние строки столбца
print(data['ceiling_height'].head())
print(data['ceiling_height'].tail())
# строим диаграмму размаха высоты потолков
data.boxplot('ceiling_height',figsize=(10,10))
plt.ylim(0,20)
Большая часть значений лежит в диапазоне до 2.5 метров, что выглядит правдоподобно. Нижний ус упирается в 2, верхний в 3 метра. Значения за пределами 
